<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
	xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="1" />
	</beans:bean>

	<!-- 컨트롤러가 리턴한 json 객체 출력용 뷰 클래스 등록해야 함 메이븐의 dependency로 다운받은 라이브러리가 제공하는 클래스임 -->
	<beans:bean id="jsonView"
		class="net.sf.json.spring.web.servlet.view.JsonView">
	</beans:bean>
	
	<!-- 파일 다운을 위한 뷰클래스 실행하는 뷰리졸버 등록
		 주의 : id속성을 지정하지 않는다.
		 여러 개의 뷰리졸버를 지정할 때는 실행 순서를 정해야 함
		 파일 다운용 뷰리졸버가 반드시 맨처음 실행되게 순서를 지정해야 함
		 컨트롤러 메소드가 리턴하는 뷰이름과 일치하는 뷰클래스가 있으면
		 자동으로 해당 뷰클래스를 실행하게 됨 -->
	<beans:bean
		class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<beans:property name="order" value="0" />
		<!-- 제일 먼저 실행되도록 순서 지정함 -->
	</beans:bean>
	
	<beans:bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="10000000"></beans:property>
        <!-- <beans:property name="maxInMemorySize" value="100000"></beans:property>
        <beans:property name="uploadTempDir" value="temp"></beans:property>
        <beans:property name="defaultEncoding" value="utf-8"></beans:property> -->
	</beans:bean>
	
	<!-- google Class Bean설정 추가 -->
	<!-- 클라이언트ID와 보안비밀 세팅-->
	<beans:bean id="googleConnectionFactory"
		class="org.springframework.social.google.connect.GoogleConnectionFactory">
		<beans:constructor-arg value="103387204834-fod1gl1s25hafvc4otqb4l704rvr4v3g.apps.googleusercontent.com" />
		<beans:constructor-arg value="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" />
	</beans:bean>
	<!-- 승인된 자바스크립트 원본과 승인된 리디렉션 URI -->
	<beans:bean id="googleOAuth2Parameters" class="org.springframework.social.oauth2.OAuth2Parameters">
		<beans:property name="scope" value="https://www.googleapis.com/auth/plus.login" />
		<beans:property name="redirectUri" value="http://localhost:8888/landmarker/googleCallback.do" />
	</beans:bean>
	
	
	<context:component-scan base-package="com.lm.landmarker" />
	
	<!-- NaverLoginBO Class에 대한 Bean설정 추가 -->
	<beans:bean id="naverLoginBO" class="com.lm.landmarker.user.controller.NaverLoginBO" />
		
	<!-- <beans:bean id="memberService" class="com.test.first.member.model.service.MemberServiceImpl" /> -->
	
</beans:beans>
